# coding: utf-8

"""
    Leap Play

    Learn more at https://www.leap-play.com  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from leapplay_client.api_client import ApiClient


class StationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_station(self, **kwargs):  # noqa: E501
        """Creates a Station (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_station(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestCreateStation create_station: Create Station Dto
        :return: StationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_station_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_station_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_station_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a Station (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_station_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestCreateStation create_station: Create Station Dto
        :return: StationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_station']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_station" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_station' in params:
            body_params = params['create_station']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StationSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_session_logs_all(self, **kwargs):  # noqa: E501
        """Gets closed Sessions from all stations (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_logs_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Entries to return
        :param int skip: Entries to skip
        :return: list[SessionLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_session_logs_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_session_logs_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_session_logs_all_with_http_info(self, **kwargs):  # noqa: E501
        """Gets closed Sessions from all stations (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_logs_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Entries to return
        :param int skip: Entries to skip
        :return: list[SessionLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session_logs_all" % key
                )
            params[key] = val
        del params['kwargs']

        if 'take' in params and params['take'] > 300:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `get_session_logs_all`, must be a value less than or equal to `300`")  # noqa: E501
        if 'take' in params and params['take'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `get_session_logs_all`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SessionLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_session_logs_by_station_id(self, station_id, **kwargs):  # noqa: E501
        """Gets closed Sessions (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_logs_by_station_id(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param int take: Entries to return
        :param int skip: Entries to skip
        :return: list[SessionLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_session_logs_by_station_id_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_session_logs_by_station_id_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def get_session_logs_by_station_id_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Gets closed Sessions (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_logs_by_station_id_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param int take: Entries to return
        :param int skip: Entries to skip
        :return: list[SessionLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session_logs_by_station_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `get_session_logs_by_station_id`")  # noqa: E501

        if 'take' in params and params['take'] > 300:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `get_session_logs_by_station_id`, must be a value less than or equal to `300`")  # noqa: E501
        if 'take' in params and params['take'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `take` when calling `get_session_logs_by_station_id`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SessionLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_settings(self, **kwargs):  # noqa: E501
        """Gets the Settings of all Stations (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[StationSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the Settings of all Stations (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[StationSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StationSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_settings_by_station_id(self, station_id, **kwargs):  # noqa: E501
        """Get the Settings of an Station (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_by_station_id(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :return: StationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_settings_by_station_id_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_settings_by_station_id_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def get_settings_by_station_id_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Get the Settings of an Station (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_by_station_id_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :return: StationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_by_station_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `get_settings_by_station_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StationSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_state(self, station_id, **kwargs):  # noqa: E501
        """Get the Station's State (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_state(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :return: StationCurrentState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_state_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_state_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def get_state_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Get the Station's State (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_state_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :return: StationCurrentState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `get_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StationCurrentState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_states(self, **kwargs):  # noqa: E501
        """Gets Collection of Station States (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_states(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str network_state_filter: Optional Network State Filter
        :return: list[StationCurrentState]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_states_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_states_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_states_with_http_info(self, **kwargs):  # noqa: E501
        """Gets Collection of Station States (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_states_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str network_state_filter: Optional Network State Filter
        :return: list[StationCurrentState]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_state_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_states" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'network_state_filter' in params:
            query_params.append(('networkStateFilter', params['network_state_filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StationCurrentState]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def session_create(self, station_id, **kwargs):  # noqa: E501
        """Creates a Session (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.session_create(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestNewStationSession create_session_request: New Session Request Dto
        :return: CreatedSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.session_create_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.session_create_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def session_create_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Creates a Session (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.session_create_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestNewStationSession create_session_request: New Session Request Dto
        :return: CreatedSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'create_session_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method session_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `session_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_session_request' in params:
            body_params = params['create_session_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/sessions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def session_stop(self, station_id, **kwargs):  # noqa: E501
        """Stops the running Session (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.session_stop(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :return: StoppedSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.session_stop_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.session_stop_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def session_stop_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Stops the running Session (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.session_stop_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :return: StoppedSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method session_stop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `session_stop`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/sessions/current/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoppedSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def session_update(self, station_id, **kwargs):  # noqa: E501
        """Updates the running Session. (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.session_update(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestSessionUpdate update_session_request: The Update Request Dto
        :return: UpdatedSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.session_update_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.session_update_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def session_update_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Updates the running Session. (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.session_update_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestSessionUpdate update_session_request: The Update Request Dto
        :return: UpdatedSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'update_session_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method session_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `session_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_session_request' in params:
            body_params = params['update_session_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/sessions/current/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdatedSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_settings(self, station_id, **kwargs):  # noqa: E501
        """Sets the Settings for an Station (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_settings(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestStationSettings set_settings_request: Settings Dto
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_settings_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_settings_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def set_settings_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Sets the Settings for an Station (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_settings_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestStationSettings set_settings_request: Settings Dto
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'set_settings_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `set_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_settings_request' in params:
            body_params = params['set_settings_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_station_mode(self, station_id, **kwargs):  # noqa: E501
        """Sets the Operation Mode (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_station_mode(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestStationMode set_mode_request: The Operation Mode
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_station_mode_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_station_mode_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def set_station_mode_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Sets the Operation Mode (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_station_mode_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestStationMode set_mode_request: The Operation Mode
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'set_mode_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_station_mode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `set_station_mode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_mode_request' in params:
            body_params = params['set_mode_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/settings/mode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_station_password(self, station_id, **kwargs):  # noqa: E501
        """Changes the Password (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_station_password(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestSetStationPassword set_password_request: New Password
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_station_password_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_station_password_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def set_station_password_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Changes the Password (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_station_password_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestSetStationPassword set_password_request: New Password
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'set_password_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_station_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `set_station_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_password_request' in params:
            body_params = params['set_password_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/settings/password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_station_qr_code(self, station_id, **kwargs):  # noqa: E501
        """Sets the QrCode (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_station_qr_code(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestStationQrCode set_qr_code_request: QrCode
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_station_qr_code_with_http_info(station_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_station_qr_code_with_http_info(station_id, **kwargs)  # noqa: E501
            return data

    def set_station_qr_code_with_http_info(self, station_id, **kwargs):  # noqa: E501
        """Sets the QrCode (Auth)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_station_qr_code_with_http_info(station_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str station_id: Station Id (required)
        :param RequestStationQrCode set_qr_code_request: QrCode
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'set_qr_code_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_station_qr_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `set_station_qr_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['stationId'] = params['station_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_qr_code_request' in params:
            body_params = params['set_qr_code_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stations/{stationId}/settings/qrcode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
