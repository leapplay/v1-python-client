# coding: utf-8

"""
    Leap Play

    Learn more at https://www.leap-play.com  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RequestResetPassword(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password_reset_token': 'str',
        'new_password': 'str'
    }

    attribute_map = {
        'username': 'username',
        'password_reset_token': 'passwordResetToken',
        'new_password': 'newPassword'
    }

    def __init__(self, username=None, password_reset_token=None, new_password=None):  # noqa: E501
        """RequestResetPassword - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._password_reset_token = None
        self._new_password = None
        self.discriminator = None

        self.username = username
        self.password_reset_token = password_reset_token
        self.new_password = new_password

    @property
    def username(self):
        """Gets the username of this RequestResetPassword.  # noqa: E501


        :return: The username of this RequestResetPassword.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RequestResetPassword.


        :param username: The username of this RequestResetPassword.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) > 30:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `30`")  # noqa: E501
        if username is not None and len(username) < 8:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `8`")  # noqa: E501

        self._username = username

    @property
    def password_reset_token(self):
        """Gets the password_reset_token of this RequestResetPassword.  # noqa: E501


        :return: The password_reset_token of this RequestResetPassword.  # noqa: E501
        :rtype: str
        """
        return self._password_reset_token

    @password_reset_token.setter
    def password_reset_token(self, password_reset_token):
        """Sets the password_reset_token of this RequestResetPassword.


        :param password_reset_token: The password_reset_token of this RequestResetPassword.  # noqa: E501
        :type: str
        """
        if password_reset_token is None:
            raise ValueError("Invalid value for `password_reset_token`, must not be `None`")  # noqa: E501
        if password_reset_token is not None and len(password_reset_token) > 350:
            raise ValueError("Invalid value for `password_reset_token`, length must be less than or equal to `350`")  # noqa: E501
        if password_reset_token is not None and len(password_reset_token) < 100:
            raise ValueError("Invalid value for `password_reset_token`, length must be greater than or equal to `100`")  # noqa: E501

        self._password_reset_token = password_reset_token

    @property
    def new_password(self):
        """Gets the new_password of this RequestResetPassword.  # noqa: E501


        :return: The new_password of this RequestResetPassword.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this RequestResetPassword.


        :param new_password: The new_password of this RequestResetPassword.  # noqa: E501
        :type: str
        """
        if new_password is None:
            raise ValueError("Invalid value for `new_password`, must not be `None`")  # noqa: E501
        if new_password is not None and len(new_password) > 80:
            raise ValueError("Invalid value for `new_password`, length must be less than or equal to `80`")  # noqa: E501
        if new_password is not None and len(new_password) < 10:
            raise ValueError("Invalid value for `new_password`, length must be greater than or equal to `10`")  # noqa: E501

        self._new_password = new_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestResetPassword, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestResetPassword):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
