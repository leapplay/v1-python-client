# coding: utf-8

"""
    Leap Play

    Learn more at https://www.leap-play.com  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from leapplay_client.models.session import Session  # noqa: F401,E501


class StationCurrentState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'station_id': 'str',
        'display_name': 'str',
        'control_mode': 'str',
        'network_state': 'str',
        'session': 'Session'
    }

    attribute_map = {
        'station_id': 'stationId',
        'display_name': 'displayName',
        'control_mode': 'controlMode',
        'network_state': 'networkState',
        'session': 'session'
    }

    def __init__(self, station_id=None, display_name=None, control_mode=None, network_state=None, session=None):  # noqa: E501
        """StationCurrentState - a model defined in Swagger"""  # noqa: E501

        self._station_id = None
        self._display_name = None
        self._control_mode = None
        self._network_state = None
        self._session = None
        self.discriminator = None

        if station_id is not None:
            self.station_id = station_id
        if display_name is not None:
            self.display_name = display_name
        if control_mode is not None:
            self.control_mode = control_mode
        if network_state is not None:
            self.network_state = network_state
        if session is not None:
            self.session = session

    @property
    def station_id(self):
        """Gets the station_id of this StationCurrentState.  # noqa: E501


        :return: The station_id of this StationCurrentState.  # noqa: E501
        :rtype: str
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id):
        """Sets the station_id of this StationCurrentState.


        :param station_id: The station_id of this StationCurrentState.  # noqa: E501
        :type: str
        """

        self._station_id = station_id

    @property
    def display_name(self):
        """Gets the display_name of this StationCurrentState.  # noqa: E501


        :return: The display_name of this StationCurrentState.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this StationCurrentState.


        :param display_name: The display_name of this StationCurrentState.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def control_mode(self):
        """Gets the control_mode of this StationCurrentState.  # noqa: E501


        :return: The control_mode of this StationCurrentState.  # noqa: E501
        :rtype: str
        """
        return self._control_mode

    @control_mode.setter
    def control_mode(self, control_mode):
        """Sets the control_mode of this StationCurrentState.


        :param control_mode: The control_mode of this StationCurrentState.  # noqa: E501
        :type: str
        """
        allowed_values = ["Undefined", "Local", "Remote", "RemoteWithQrCode"]  # noqa: E501
        if control_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `control_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(control_mode, allowed_values)
            )

        self._control_mode = control_mode

    @property
    def network_state(self):
        """Gets the network_state of this StationCurrentState.  # noqa: E501


        :return: The network_state of this StationCurrentState.  # noqa: E501
        :rtype: str
        """
        return self._network_state

    @network_state.setter
    def network_state(self, network_state):
        """Sets the network_state of this StationCurrentState.


        :param network_state: The network_state of this StationCurrentState.  # noqa: E501
        :type: str
        """
        allowed_values = ["Disconnected", "Connecting", "Connected"]  # noqa: E501
        if network_state not in allowed_values:
            raise ValueError(
                "Invalid value for `network_state` ({0}), must be one of {1}"  # noqa: E501
                .format(network_state, allowed_values)
            )

        self._network_state = network_state

    @property
    def session(self):
        """Gets the session of this StationCurrentState.  # noqa: E501


        :return: The session of this StationCurrentState.  # noqa: E501
        :rtype: Session
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this StationCurrentState.


        :param session: The session of this StationCurrentState.  # noqa: E501
        :type: Session
        """

        self._session = session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StationCurrentState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StationCurrentState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
