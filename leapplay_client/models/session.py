# coding: utf-8

"""
    Leap Play

    Learn more at https://www.leap-play.com  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_id': 'str',
        'reference': 'str',
        'state': 'str',
        'started_on_utc': 'datetime',
        'start_duration': 'str',
        'max_duration_limit': 'str'
    }

    attribute_map = {
        'session_id': 'sessionId',
        'reference': 'reference',
        'state': 'state',
        'started_on_utc': 'startedOnUtc',
        'start_duration': 'startDuration',
        'max_duration_limit': 'maxDurationLimit'
    }

    def __init__(self, session_id=None, reference=None, state=None, started_on_utc=None, start_duration=None, max_duration_limit=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501

        self._session_id = None
        self._reference = None
        self._state = None
        self._started_on_utc = None
        self._start_duration = None
        self._max_duration_limit = None
        self.discriminator = None

        if session_id is not None:
            self.session_id = session_id
        if reference is not None:
            self.reference = reference
        if state is not None:
            self.state = state
        if started_on_utc is not None:
            self.started_on_utc = started_on_utc
        if start_duration is not None:
            self.start_duration = start_duration
        if max_duration_limit is not None:
            self.max_duration_limit = max_duration_limit

    @property
    def session_id(self):
        """Gets the session_id of this Session.  # noqa: E501


        :return: The session_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Session.


        :param session_id: The session_id of this Session.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def reference(self):
        """Gets the reference of this Session.  # noqa: E501


        :return: The reference of this Session.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Session.


        :param reference: The reference of this Session.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def state(self):
        """Gets the state of this Session.  # noqa: E501


        :return: The state of this Session.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Session.


        :param state: The state of this Session.  # noqa: E501
        :type: str
        """
        allowed_values = ["Requested", "Delivered", "Started", "Ended", "Canceled", "DeliveryTimeout", "ResponseTimeout"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def started_on_utc(self):
        """Gets the started_on_utc of this Session.  # noqa: E501


        :return: The started_on_utc of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._started_on_utc

    @started_on_utc.setter
    def started_on_utc(self, started_on_utc):
        """Sets the started_on_utc of this Session.


        :param started_on_utc: The started_on_utc of this Session.  # noqa: E501
        :type: datetime
        """

        self._started_on_utc = started_on_utc

    @property
    def start_duration(self):
        """Gets the start_duration of this Session.  # noqa: E501


        :return: The start_duration of this Session.  # noqa: E501
        :rtype: str
        """
        return self._start_duration

    @start_duration.setter
    def start_duration(self, start_duration):
        """Sets the start_duration of this Session.


        :param start_duration: The start_duration of this Session.  # noqa: E501
        :type: str
        """

        self._start_duration = start_duration

    @property
    def max_duration_limit(self):
        """Gets the max_duration_limit of this Session.  # noqa: E501


        :return: The max_duration_limit of this Session.  # noqa: E501
        :rtype: str
        """
        return self._max_duration_limit

    @max_duration_limit.setter
    def max_duration_limit(self, max_duration_limit):
        """Sets the max_duration_limit of this Session.


        :param max_duration_limit: The max_duration_limit of this Session.  # noqa: E501
        :type: str
        """

        self._max_duration_limit = max_duration_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Session, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
